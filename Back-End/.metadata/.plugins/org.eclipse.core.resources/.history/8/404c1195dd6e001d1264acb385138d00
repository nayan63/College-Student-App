package com.nayan.Student.impl;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static java.nio.file.Paths.get;
import static java.nio.file.Files.copy;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.nayan.Student.Enity.Student;
import com.nayan.Student.Enity.StudentImage;
import com.nayan.Student.VO.StudentWithCollege;
import com.nayan.Student.repository.StudentRepository;
import com.nayan.Student.service.StudentService;

@Component
public class StudentImplement implements StudentService {

	@Autowired
	private StudentRepository repo;

	@Autowired
	RestTemplate restTemplate;

	private final String UPLOAD_PATH = "F:\\JAVA TUTO\\For REACT\\StudentService\\src\\main\\resources\\static";

	@Override
	public List<StudentImage> allList() throws Exception {
		List<Student> all = repo.findAll();
		
		Iterator<Student> itr = all.iterator();
		
		List<StudentImage> withImage = new ArrayList<StudentImage>();
		try
		{
			while(itr.hasNext())
			{
				Student std = itr.next();
	            
	            if(std.getFilename()!=null)
	            {
	            	Path file = get(UPLOAD_PATH,std.getFilename()).toAbsolutePath().normalize();
		            Resource resource = new UrlResource(file.toUri());
	            	StudentImage sti = new StudentImage(
		            		std.getId(), 
		            		std.getName(), 
		            		std.getAge(), 
		            		std.getCollege_id(), 
		            		std.getBranch(), 
		            		resource);
	            	
	            	withImage.add(sti);
	            }
	            else
	            {
	            	StudentImage sti = new StudentImage(
		            		std.getId(), 
		            		std.getName(), 
		            		std.getAge(), 
		            		std.getCollege_id(), 
		            		std.getBranch(), 
		            		null);
	            	
	            	withImage.add(sti);
	            }
			}
			
			return withImage;
		}
		catch(Exception e)
		{
			throw new Exception(e.getMessage());
		}
		
	}

	@Override
	public Student getById(long id) throws Exception {
		Optional<Student> exist = repo.findById(id);

		if (exist.isPresent()) {
			return exist.get();
		} else {
			throw new Exception("No Student Find");
		}
	}

	@Override
	public Student add(Student std, MultipartFile profile) throws Exception {
		try {
			String filename = new Date().getTime() + profile.getOriginalFilename();

			Path fileStorage = get(UPLOAD_PATH, filename).toAbsolutePath().normalize();
			copy(profile.getInputStream(), fileStorage, REPLACE_EXISTING);

			std.setFilename(filename);
			Student save = repo.save(std);
			return save;
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	@Override
	public Student edit(long id, Student std) throws Exception {
		try {
			Optional<Student> exist = repo.findById(id);

			if (exist.isPresent()) {
				Student before = exist.get();
				before.setName(std.getName());
				before.setAge(std.getAge());
				before.setCollege_id(std.getCollege_id());
				before.setBranch(std.getBranch());

				return repo.save(before);
			} else {
				throw new Exception("No Student Found");
			}
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	@Override
	public Student deleteById(long id) throws Exception {
		try {
			Optional<Student> exist = repo.findById(id);
			if (exist.isPresent()) {
				Student student = exist.get();
				repo.deleteById(id);
				return student;
			} else {
				throw new Exception("Student Not Found");
			}
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	@Override
	public List<StudentWithCollege> getByCollege(long id) throws Exception {
		try {
			List<StudentWithCollege> swcList = new ArrayList<StudentWithCollege>();
			List<Student> students = repo.getByCollege(id);
			if (students.isEmpty()) {
				throw new Exception("No Student Found with id " + id);
			} else {
				String clgName = restTemplate.getForObject("http://COLLEGE-SERVICE/college/college-name/" + id,
						String.class);

				Iterator<Student> itr = students.iterator();
				while (itr.hasNext()) {
					Student std = itr.next();

					StudentWithCollege swc = new StudentWithCollege(std.getId(), std.getName(), std.getAge(), clgName,
							std.getBranch());
					swcList.add(swc);
				}
				return swcList;
			}
		} catch (Exception e) {
			throw new Exception("No Student Found with id " + id);
		}
	}
	
	@GetMapping("/file")
	Resource files() throws Exception
	{
		try
		{
				Student std = this.getById(1);
	            
	            if(std.getFilename()!=null)
	            {
	            	Path file = get(UPLOAD_PATH,std.getFilename()).toAbsolutePath().normalize();
		            Resource resource = new UrlResource(file.toUri());
	            	return resource;
	            }
	            else
	            {
	            	return null;
	            }
		}
		catch(Exception e)
		{
			throw new Exception(e.getMessage());
		}
	}

}
